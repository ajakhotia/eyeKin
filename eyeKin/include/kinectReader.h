#ifndef __KINECT_READER__
#define __KINECT_READER__

#include "Kinect.h"
#include <thread>
#include <mutex>
#include "utilities.h"
#include "opencv.h"

//! Defines a namespace to contain non project specific functionality developed at Personal Robotics Lab.
/*!	Define a namespace to contain generic code and fuctionality developed at
Personal Robotics Lab which is not specific to a particular project and
can be used as it is across multiple projects.*/
namespace personalRobotics
{
	//! This class provides an polling based interface to retrieve image frames from Kinect v2.0 for Windows(8.1)
	/*!	This class wraps around the basic Kinect 2.0 API provided by Microsoft Kinect
	SDK and provides a polling based interface to retrieve image frames. The frames
	are in sync as they are retrieved using a multi-source frame reader. This class
	runs a thread of its own to poll for frames and sets a @link MutexBool @endlink
	when new frames are acquired.
	
	TODO:	@li @c	Move the code for acquisiotion of kinect sensor and other
					interfaces to Start() function in order to make sure that
					the object constructor is fail proof.*/
	class KinectReader
	{
	protected:
		// Interfaces
		IKinectSensor *kinectPtr;					//!< Holds the pointer to the kinect sensor acquired during construction of object.
		IMultiSourceFrameReader *readerPtr;			//!< Holds the pointer to coordinate mapper obtained from the kinect sensor during construction.
		ICoordinateMapper *coordinateMapperPtr;		//!< Holds the pointer to multi-source frame reader obtained from the kinect sensor during construction.

		// Reader thread
		std::thread readerThread;					//!< Handle to the thread that run kinectThreadRoutine().

		// Parameters
		int rgbWidth;								//!< Width of the color image in pixels.
		int rgbHeight;								//!< Height of the color image in pixels.
		int depthWidth;								//!< Width of the depth image in pixels.
		int depthHeight;							//!< Height of the depth image in pixels.

		// Containers
		cv::Mat rgbImage;							//!< Holds 3 channel color image(8 bits per channel) extracted from the 4-channel RGBA image
		cv::Mat rgbaImage;							//!< Holds 4 channel color image(8 bits per channel) as produced by kinect API with an empty alpha channel.
		cv::Mat depthImage;							//!< Holds the single channel 16-bit depth image. The birghtness of each pixel is equal to its depth expressed in millimeters.
		cv::Mat irImage;							//!< Holds the single channel 16-bit grayscale IR images.
		cv::Mat dummy;								//!< Holds a dummy image for any misc. use.
		CameraSpacePoint *pointCloudPtr;			//!< Array of points expressed in 3D camera space. The unit of distance is meter. The points are generated by coordinate mapper based the @link depthImage @endlink.
		ColorSpacePoint *depth2colorMappingPtr;		//!< Holds a mapping of points in @link depthImage @endlink to their correspoing points in @link rgbImage @endlink. The mapping is a function of the @link depthImage @endlink itself.
	public:
		//!	Default constructor. Acquires required interface as the object is constructed
		/*!	Acquires the default kinect sensor and retrieves the coordinate mapper and multi-souce frame reader.*/
		KinectReader();
		
		//!	Default destructor. Releases acquired interfaces before destruction.
		/*!	Releases acquired interfaces before destruction of object. However, the
			destructor does not call the Stop() function. Destruction of the object
			prior to a call for Stop() will may lead to fatal errors.*/
		~KinectReader();

		//! Converts a set of points from depth/infrared frame to color frame.
		/*!	Converts a set of points represented in depth/infrared frame to their
			corresponding point represented in the color frame.*/
		void mapInfraredToColor(std::vector<cv::Point> &infraredPoints, std::vector<cv::Point> &colorPoints, ColorSpacePoint *mapping);

		//!	Polls for a new frame and generates a point cloud from the depth map.
		/*!	Polls for a new frame and set @link newFrameArrived @endlink to true
			if new image frames are acquired. The function uses @link rgbMutex
			@endlink, @link rgbaMutex @endlink, @link depthMutex @endlink, @link
			irMutex @endlink, @link pointCloudMutex @endlink and @link
			depth2colorMappingMutex @endlink to prevent race conditions while
			writinng data to @link rgbImage @endlink, @link rgbaImage @endlink,
			@link depthImage @endlink, @link irImage @endlink, @link
			pointCloudPtr @endlink and @link depth2colorMappingPtr @endlink
			respectively.*/
		void pollFrames(bool save);

		void kinectThreadRoutine();					//!< Continuously polls for new images by calling pollFrames() in a loop.
		void startKinect();							//!< Spawns a thread to run kinectThreadRoutine() to continuosly poll for frames.
		void stopKinect();							//!< Stops the kinectReader thread and merges it cleanly with the parent thread.

		// Thread safe boolean flags
		MutexBool newFrameArrived;					//!< Set to true each time a new frame is acquired. The consumer function is responsible to set it to false once the frame is used.
		MutexBool stopKinectFlag;					//!< Control varibale for the while loop in kinectThreadRoutine(). The loop ends and the @link readerThread @endlink exits when this is set to true by stopKinect() function.
		MutexBool isColorAllocated;					//!< This is set to true once when the first frame arrives and the memory to store color image data is allocated based on the size of the image. 
		MutexBool isDepthAllocated;					//!< This is set to true once when the first frame arrives and the memory to store depth image data is allocated based on the size of the image.
		MutexBool isIRallocated;					//!< This is set to true once when the first frame arrives and the memory to store infrared image data is allocated based on the size of the image.

		// Thread safety locks
		std::mutex rgbMutex;						//!< Mutex to prevent race conditions while accessing @link rgbImage @endlink.
		std::mutex rgbaMutex;						//!< Mutex to prevent race conditions while accessing @link rgbaImage @endlink.
		std::mutex depthMutex;						//!< Mutex to prevent race conditions while accessing @link depthImage @endlink.
		std::mutex irMutex;							//!< Mutex to prevent race conditions while accessing @link irImage @endlink.
		std::mutex pointCloudMutex;					//!< Mutex to prevent race conditions while accessing @link pointCloudPtr @endlink.
		std::mutex depth2colorMappingMutex;			//!< Mutex to prevent race conditions while accessing @link depth2colorMappingPtr @endlink.

		// Accessors
		ICoordinateMapper* getCoordinateMapper();	//!< Gets a pointer to the coordinate mapper interface acquired during construction of the object.
		cv::Mat* getColorImagePtr();				//!< Gets a pointer to the color image matrix.
		cv::Mat* getIRimagePtr();					//!< Gets a pointer to the infrared image matrix.
		cv::Mat* getDepthImagePtr();				//!< Gets a pointer to the depth image matrix
		CameraSpacePoint* getPointCloudPtr();		//!< Gets a pointer to the point cloud computed by the coordinate mapper.
		size_t getPointCloudSize();					//!< Gets the size of the point cloud, i.e the number of points. It is equal to the number of pixels in depth image
	};

	//!	Safely releases dynamically allocated interfaces.
	/*!	Safely releases dynamically allocated interfaces and sets them to nullptr
	as required by all kinect interfaces. The class, to which the object
	belongs to, should implement Release() method which deallocates the
	memory used by the object appropriately.

	@param[in]	inInterface		pointer to the object to be released. The class
								to which the object belongs should implement a
								Release() method which deallocates the memory
								used by the object appropriately.

	@return		void*/
	template<class Interface> void safeRelease(Interface inInterface)
	{
		inInterface->Release();
		inInterface = NULL;
	}
}
#endif