// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity.proto

#ifndef PROTOBUF_entity_2eproto__INCLUDED
#define PROTOBUF_entity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose2D.pb.h"
#include "point2D.pb.h"
// @@protoc_insertion_point(includes)

namespace procamPRL {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_entity_2eproto();
void protobuf_AssignDesc_entity_2eproto();
void protobuf_ShutdownFile_entity_2eproto();

class Entity;
class Entity_Image;
class EntityList;

enum Entity_Command {
  Entity_Command_NONE = 1,
  Entity_Command_SEND_DISP_INFO_PACKET = 2,
  Entity_Command_START_CALIBRATION = 3,
  Entity_Command_STOP_CALIBRATION = 4,
  Entity_Command_STREAM = 5
};
bool Entity_Command_IsValid(int value);
const Entity_Command Entity_Command_Command_MIN = Entity_Command_NONE;
const Entity_Command Entity_Command_Command_MAX = Entity_Command_STREAM;
const int Entity_Command_Command_ARRAYSIZE = Entity_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Entity_Command_descriptor();
inline const ::std::string& Entity_Command_Name(Entity_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Entity_Command_descriptor(), value);
}
inline bool Entity_Command_Parse(
    const ::std::string& name, Entity_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Entity_Command>(
    Entity_Command_descriptor(), name, value);
}
// ===================================================================

class Entity_Image : public ::google::protobuf::Message {
 public:
  Entity_Image();
  virtual ~Entity_Image();

  Entity_Image(const Entity_Image& from);

  inline Entity_Image& operator=(const Entity_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity_Image& default_instance();

  void Swap(Entity_Image* other);

  // implements Message ----------------------------------------------

  Entity_Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity_Image& from);
  void MergeFrom(const Entity_Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:procamPRL.Entity.Image)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_entity_2eproto();
  friend void protobuf_AssignDesc_entity_2eproto();
  friend void protobuf_ShutdownFile_entity_2eproto();

  void InitAsDefaultInstance();
  static Entity_Image* default_instance_;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  void Swap(Entity* other);

  // implements Message ----------------------------------------------

  Entity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Entity_Image Image;

  typedef Entity_Command Command;
  static const Command NONE = Entity_Command_NONE;
  static const Command SEND_DISP_INFO_PACKET = Entity_Command_SEND_DISP_INFO_PACKET;
  static const Command START_CALIBRATION = Entity_Command_START_CALIBRATION;
  static const Command STOP_CALIBRATION = Entity_Command_STOP_CALIBRATION;
  static const Command STREAM = Entity_Command_STREAM;
  static inline bool Command_IsValid(int value) {
    return Entity_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Entity_Command_Command_MIN;
  static const Command Command_MAX =
    Entity_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Entity_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Entity_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Entity_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Entity_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 timestamp_secs = 1;
  inline bool has_timestamp_secs() const;
  inline void clear_timestamp_secs();
  static const int kTimestampSecsFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp_secs() const;
  inline void set_timestamp_secs(::google::protobuf::int64 value);

  // optional int32 timestamp_nsecs = 2;
  inline bool has_timestamp_nsecs() const;
  inline void clear_timestamp_nsecs();
  static const int kTimestampNsecsFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp_nsecs() const;
  inline void set_timestamp_nsecs(::google::protobuf::int32 value);

  // optional int32 frameId = 3;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameIdFieldNumber = 3;
  inline ::google::protobuf::int32 frameid() const;
  inline void set_frameid(::google::protobuf::int32 value);

  // optional .procamPRL.Entity.Command command = 4 [default = NONE];
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 4;
  inline ::procamPRL::Entity_Command command() const;
  inline void set_command(::procamPRL::Entity_Command value);

  // optional .personalRobotics.Pose2D pose = 5;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 5;
  inline const ::personalRobotics::Pose2D& pose() const;
  inline ::personalRobotics::Pose2D* mutable_pose();
  inline ::personalRobotics::Pose2D* release_pose();
  inline void set_allocated_pose(::personalRobotics::Pose2D* pose);

  // optional .personalRobotics.Point2D boundingSize = 6;
  inline bool has_boundingsize() const;
  inline void clear_boundingsize();
  static const int kBoundingSizeFieldNumber = 6;
  inline const ::personalRobotics::Point2D& boundingsize() const;
  inline ::personalRobotics::Point2D* mutable_boundingsize();
  inline ::personalRobotics::Point2D* release_boundingsize();
  inline void set_allocated_boundingsize(::personalRobotics::Point2D* boundingsize);

  // optional .personalRobotics.Point2D pixelSize = 7;
  inline bool has_pixelsize() const;
  inline void clear_pixelsize();
  static const int kPixelSizeFieldNumber = 7;
  inline const ::personalRobotics::Point2D& pixelsize() const;
  inline ::personalRobotics::Point2D* mutable_pixelsize();
  inline ::personalRobotics::Point2D* release_pixelsize();
  inline void set_allocated_pixelsize(::personalRobotics::Point2D* pixelsize);

  // repeated .personalRobotics.Point2D contours = 8;
  inline int contours_size() const;
  inline void clear_contours();
  static const int kContoursFieldNumber = 8;
  inline const ::personalRobotics::Point2D& contours(int index) const;
  inline ::personalRobotics::Point2D* mutable_contours(int index);
  inline ::personalRobotics::Point2D* add_contours();
  inline const ::google::protobuf::RepeatedPtrField< ::personalRobotics::Point2D >&
      contours() const;
  inline ::google::protobuf::RepeatedPtrField< ::personalRobotics::Point2D >*
      mutable_contours();

  // optional .procamPRL.Entity.Image image = 9;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 9;
  inline const ::procamPRL::Entity_Image& image() const;
  inline ::procamPRL::Entity_Image* mutable_image();
  inline ::procamPRL::Entity_Image* release_image();
  inline void set_allocated_image(::procamPRL::Entity_Image* image);

  // @@protoc_insertion_point(class_scope:procamPRL.Entity)
 private:
  inline void set_has_timestamp_secs();
  inline void clear_has_timestamp_secs();
  inline void set_has_timestamp_nsecs();
  inline void clear_has_timestamp_nsecs();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_boundingsize();
  inline void clear_has_boundingsize();
  inline void set_has_pixelsize();
  inline void clear_has_pixelsize();
  inline void set_has_image();
  inline void clear_has_image();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_secs_;
  ::google::protobuf::int32 timestamp_nsecs_;
  ::google::protobuf::int32 frameid_;
  ::personalRobotics::Pose2D* pose_;
  ::personalRobotics::Point2D* boundingsize_;
  ::personalRobotics::Point2D* pixelsize_;
  ::google::protobuf::RepeatedPtrField< ::personalRobotics::Point2D > contours_;
  ::procamPRL::Entity_Image* image_;
  int command_;
  friend void  protobuf_AddDesc_entity_2eproto();
  friend void protobuf_AssignDesc_entity_2eproto();
  friend void protobuf_ShutdownFile_entity_2eproto();

  void InitAsDefaultInstance();
  static Entity* default_instance_;
};
// -------------------------------------------------------------------

class EntityList : public ::google::protobuf::Message {
 public:
  EntityList();
  virtual ~EntityList();

  EntityList(const EntityList& from);

  inline EntityList& operator=(const EntityList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityList& default_instance();

  void Swap(EntityList* other);

  // implements Message ----------------------------------------------

  EntityList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityList& from);
  void MergeFrom(const EntityList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .procamPRL.Entity entityList = 1;
  inline int entitylist_size() const;
  inline void clear_entitylist();
  static const int kEntityListFieldNumber = 1;
  inline const ::procamPRL::Entity& entitylist(int index) const;
  inline ::procamPRL::Entity* mutable_entitylist(int index);
  inline ::procamPRL::Entity* add_entitylist();
  inline const ::google::protobuf::RepeatedPtrField< ::procamPRL::Entity >&
      entitylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::procamPRL::Entity >*
      mutable_entitylist();

  // @@protoc_insertion_point(class_scope:procamPRL.EntityList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::procamPRL::Entity > entitylist_;
  friend void  protobuf_AddDesc_entity_2eproto();
  friend void protobuf_AssignDesc_entity_2eproto();
  friend void protobuf_ShutdownFile_entity_2eproto();

  void InitAsDefaultInstance();
  static EntityList* default_instance_;
};
// ===================================================================


// ===================================================================

// Entity_Image

// optional int32 width = 1;
inline bool Entity_Image::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity_Image::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity_Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity_Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Entity_Image::width() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.Image.width)
  return width_;
}
inline void Entity_Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:procamPRL.Entity.Image.width)
}

// optional int32 height = 2;
inline bool Entity_Image::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity_Image::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity_Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity_Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Entity_Image::height() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.Image.height)
  return height_;
}
inline void Entity_Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:procamPRL.Entity.Image.height)
}

// optional bytes data = 3;
inline bool Entity_Image::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entity_Image::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entity_Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entity_Image::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Entity_Image::data() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.Image.data)
  return *data_;
}
inline void Entity_Image::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:procamPRL.Entity.Image.data)
}
inline void Entity_Image::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:procamPRL.Entity.Image.data)
}
inline void Entity_Image::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:procamPRL.Entity.Image.data)
}
inline ::std::string* Entity_Image::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:procamPRL.Entity.Image.data)
  return data_;
}
inline ::std::string* Entity_Image::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Entity_Image::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:procamPRL.Entity.Image.data)
}

// -------------------------------------------------------------------

// Entity

// optional int64 timestamp_secs = 1;
inline bool Entity::has_timestamp_secs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity::set_has_timestamp_secs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity::clear_has_timestamp_secs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity::clear_timestamp_secs() {
  timestamp_secs_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_secs();
}
inline ::google::protobuf::int64 Entity::timestamp_secs() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.timestamp_secs)
  return timestamp_secs_;
}
inline void Entity::set_timestamp_secs(::google::protobuf::int64 value) {
  set_has_timestamp_secs();
  timestamp_secs_ = value;
  // @@protoc_insertion_point(field_set:procamPRL.Entity.timestamp_secs)
}

// optional int32 timestamp_nsecs = 2;
inline bool Entity::has_timestamp_nsecs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity::set_has_timestamp_nsecs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity::clear_has_timestamp_nsecs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity::clear_timestamp_nsecs() {
  timestamp_nsecs_ = 0;
  clear_has_timestamp_nsecs();
}
inline ::google::protobuf::int32 Entity::timestamp_nsecs() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.timestamp_nsecs)
  return timestamp_nsecs_;
}
inline void Entity::set_timestamp_nsecs(::google::protobuf::int32 value) {
  set_has_timestamp_nsecs();
  timestamp_nsecs_ = value;
  // @@protoc_insertion_point(field_set:procamPRL.Entity.timestamp_nsecs)
}

// optional int32 frameId = 3;
inline bool Entity::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entity::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entity::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entity::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 Entity::frameid() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.frameId)
  return frameid_;
}
inline void Entity::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:procamPRL.Entity.frameId)
}

// optional .procamPRL.Entity.Command command = 4 [default = NONE];
inline bool Entity::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entity::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entity::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entity::clear_command() {
  command_ = 1;
  clear_has_command();
}
inline ::procamPRL::Entity_Command Entity::command() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.command)
  return static_cast< ::procamPRL::Entity_Command >(command_);
}
inline void Entity::set_command(::procamPRL::Entity_Command value) {
  assert(::procamPRL::Entity_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:procamPRL.Entity.command)
}

// optional .personalRobotics.Pose2D pose = 5;
inline bool Entity::has_pose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Entity::set_has_pose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Entity::clear_has_pose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Entity::clear_pose() {
  if (pose_ != NULL) pose_->::personalRobotics::Pose2D::Clear();
  clear_has_pose();
}
inline const ::personalRobotics::Pose2D& Entity::pose() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::personalRobotics::Pose2D* Entity::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::personalRobotics::Pose2D;
  // @@protoc_insertion_point(field_mutable:procamPRL.Entity.pose)
  return pose_;
}
inline ::personalRobotics::Pose2D* Entity::release_pose() {
  clear_has_pose();
  ::personalRobotics::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Entity::set_allocated_pose(::personalRobotics::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:procamPRL.Entity.pose)
}

// optional .personalRobotics.Point2D boundingSize = 6;
inline bool Entity::has_boundingsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Entity::set_has_boundingsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Entity::clear_has_boundingsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Entity::clear_boundingsize() {
  if (boundingsize_ != NULL) boundingsize_->::personalRobotics::Point2D::Clear();
  clear_has_boundingsize();
}
inline const ::personalRobotics::Point2D& Entity::boundingsize() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.boundingSize)
  return boundingsize_ != NULL ? *boundingsize_ : *default_instance_->boundingsize_;
}
inline ::personalRobotics::Point2D* Entity::mutable_boundingsize() {
  set_has_boundingsize();
  if (boundingsize_ == NULL) boundingsize_ = new ::personalRobotics::Point2D;
  // @@protoc_insertion_point(field_mutable:procamPRL.Entity.boundingSize)
  return boundingsize_;
}
inline ::personalRobotics::Point2D* Entity::release_boundingsize() {
  clear_has_boundingsize();
  ::personalRobotics::Point2D* temp = boundingsize_;
  boundingsize_ = NULL;
  return temp;
}
inline void Entity::set_allocated_boundingsize(::personalRobotics::Point2D* boundingsize) {
  delete boundingsize_;
  boundingsize_ = boundingsize;
  if (boundingsize) {
    set_has_boundingsize();
  } else {
    clear_has_boundingsize();
  }
  // @@protoc_insertion_point(field_set_allocated:procamPRL.Entity.boundingSize)
}

// optional .personalRobotics.Point2D pixelSize = 7;
inline bool Entity::has_pixelsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Entity::set_has_pixelsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Entity::clear_has_pixelsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Entity::clear_pixelsize() {
  if (pixelsize_ != NULL) pixelsize_->::personalRobotics::Point2D::Clear();
  clear_has_pixelsize();
}
inline const ::personalRobotics::Point2D& Entity::pixelsize() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.pixelSize)
  return pixelsize_ != NULL ? *pixelsize_ : *default_instance_->pixelsize_;
}
inline ::personalRobotics::Point2D* Entity::mutable_pixelsize() {
  set_has_pixelsize();
  if (pixelsize_ == NULL) pixelsize_ = new ::personalRobotics::Point2D;
  // @@protoc_insertion_point(field_mutable:procamPRL.Entity.pixelSize)
  return pixelsize_;
}
inline ::personalRobotics::Point2D* Entity::release_pixelsize() {
  clear_has_pixelsize();
  ::personalRobotics::Point2D* temp = pixelsize_;
  pixelsize_ = NULL;
  return temp;
}
inline void Entity::set_allocated_pixelsize(::personalRobotics::Point2D* pixelsize) {
  delete pixelsize_;
  pixelsize_ = pixelsize;
  if (pixelsize) {
    set_has_pixelsize();
  } else {
    clear_has_pixelsize();
  }
  // @@protoc_insertion_point(field_set_allocated:procamPRL.Entity.pixelSize)
}

// repeated .personalRobotics.Point2D contours = 8;
inline int Entity::contours_size() const {
  return contours_.size();
}
inline void Entity::clear_contours() {
  contours_.Clear();
}
inline const ::personalRobotics::Point2D& Entity::contours(int index) const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.contours)
  return contours_.Get(index);
}
inline ::personalRobotics::Point2D* Entity::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:procamPRL.Entity.contours)
  return contours_.Mutable(index);
}
inline ::personalRobotics::Point2D* Entity::add_contours() {
  // @@protoc_insertion_point(field_add:procamPRL.Entity.contours)
  return contours_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::personalRobotics::Point2D >&
Entity::contours() const {
  // @@protoc_insertion_point(field_list:procamPRL.Entity.contours)
  return contours_;
}
inline ::google::protobuf::RepeatedPtrField< ::personalRobotics::Point2D >*
Entity::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:procamPRL.Entity.contours)
  return &contours_;
}

// optional .procamPRL.Entity.Image image = 9;
inline bool Entity::has_image() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Entity::set_has_image() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Entity::clear_has_image() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Entity::clear_image() {
  if (image_ != NULL) image_->::procamPRL::Entity_Image::Clear();
  clear_has_image();
}
inline const ::procamPRL::Entity_Image& Entity::image() const {
  // @@protoc_insertion_point(field_get:procamPRL.Entity.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::procamPRL::Entity_Image* Entity::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::procamPRL::Entity_Image;
  // @@protoc_insertion_point(field_mutable:procamPRL.Entity.image)
  return image_;
}
inline ::procamPRL::Entity_Image* Entity::release_image() {
  clear_has_image();
  ::procamPRL::Entity_Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline void Entity::set_allocated_image(::procamPRL::Entity_Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:procamPRL.Entity.image)
}

// -------------------------------------------------------------------

// EntityList

// repeated .procamPRL.Entity entityList = 1;
inline int EntityList::entitylist_size() const {
  return entitylist_.size();
}
inline void EntityList::clear_entitylist() {
  entitylist_.Clear();
}
inline const ::procamPRL::Entity& EntityList::entitylist(int index) const {
  // @@protoc_insertion_point(field_get:procamPRL.EntityList.entityList)
  return entitylist_.Get(index);
}
inline ::procamPRL::Entity* EntityList::mutable_entitylist(int index) {
  // @@protoc_insertion_point(field_mutable:procamPRL.EntityList.entityList)
  return entitylist_.Mutable(index);
}
inline ::procamPRL::Entity* EntityList::add_entitylist() {
  // @@protoc_insertion_point(field_add:procamPRL.EntityList.entityList)
  return entitylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::procamPRL::Entity >&
EntityList::entitylist() const {
  // @@protoc_insertion_point(field_list:procamPRL.EntityList.entityList)
  return entitylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::procamPRL::Entity >*
EntityList::mutable_entitylist() {
  // @@protoc_insertion_point(field_mutable_list:procamPRL.EntityList.entityList)
  return &entitylist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace procamPRL

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::procamPRL::Entity_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::procamPRL::Entity_Command>() {
  return ::procamPRL::Entity_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_entity_2eproto__INCLUDED
