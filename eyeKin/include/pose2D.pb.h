// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose2D.proto

#ifndef PROTOBUF_pose2D_2eproto__INCLUDED
#define PROTOBUF_pose2D_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "point2D.pb.h"
// @@protoc_insertion_point(includes)

namespace personalRobotics {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pose2D_2eproto();
void protobuf_AssignDesc_pose2D_2eproto();
void protobuf_ShutdownFile_pose2D_2eproto();

class Pose2D;

// ===================================================================

class Pose2D : public ::google::protobuf::Message {
 public:
  Pose2D();
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();

  void Swap(Pose2D* other);

  // implements Message ----------------------------------------------

  Pose2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .personalRobotics.Point2D position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::personalRobotics::Point2D& position() const;
  inline ::personalRobotics::Point2D* mutable_position();
  inline ::personalRobotics::Point2D* release_position();
  inline void set_allocated_position(::personalRobotics::Point2D* position);

  // required float angle = 2 [default = 0];
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 2;
  inline float angle() const;
  inline void set_angle(float value);

  // @@protoc_insertion_point(class_scope:personalRobotics.Pose2D)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::personalRobotics::Point2D* position_;
  float angle_;
  friend void  protobuf_AddDesc_pose2D_2eproto();
  friend void protobuf_AssignDesc_pose2D_2eproto();
  friend void protobuf_ShutdownFile_pose2D_2eproto();

  void InitAsDefaultInstance();
  static Pose2D* default_instance_;
};
// ===================================================================


// ===================================================================

// Pose2D

// required .personalRobotics.Point2D position = 1;
inline bool Pose2D::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose2D::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose2D::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose2D::clear_position() {
  if (position_ != NULL) position_->::personalRobotics::Point2D::Clear();
  clear_has_position();
}
inline const ::personalRobotics::Point2D& Pose2D::position() const {
  // @@protoc_insertion_point(field_get:personalRobotics.Pose2D.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::personalRobotics::Point2D* Pose2D::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::personalRobotics::Point2D;
  // @@protoc_insertion_point(field_mutable:personalRobotics.Pose2D.position)
  return position_;
}
inline ::personalRobotics::Point2D* Pose2D::release_position() {
  clear_has_position();
  ::personalRobotics::Point2D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pose2D::set_allocated_position(::personalRobotics::Point2D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:personalRobotics.Pose2D.position)
}

// required float angle = 2 [default = 0];
inline bool Pose2D::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose2D::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose2D::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose2D::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float Pose2D::angle() const {
  // @@protoc_insertion_point(field_get:personalRobotics.Pose2D.angle)
  return angle_;
}
inline void Pose2D::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:personalRobotics.Pose2D.angle)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace personalRobotics

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pose2D_2eproto__INCLUDED
