// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace procamPRL {

namespace {

const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Entity_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EntityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_entity_2eproto() {
  protobuf_AddDesc_entity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "entity.proto");
  GOOGLE_CHECK(file != NULL);
  Entity_descriptor_ = file->message_type(0);
  static const int Entity_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, timestamp_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, timestamp_nsecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, boundingsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, pixelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, contours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, image_),
  };
  Entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entity));
  Entity_Image_descriptor_ = Entity_descriptor_->nested_type(0);
  static const int Entity_Image_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Image, data_),
  };
  Entity_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entity_Image_descriptor_,
      Entity_Image::default_instance_,
      Entity_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entity_Image));
  Entity_Command_descriptor_ = Entity_descriptor_->enum_type(0);
  EntityList_descriptor_ = file->message_type(1);
  static const int EntityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityList, entitylist_),
  };
  EntityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityList_descriptor_,
      EntityList::default_instance_,
      EntityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_entity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entity_Image_descriptor_, &Entity_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityList_descriptor_, &EntityList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_entity_2eproto() {
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete Entity_Image::default_instance_;
  delete Entity_Image_reflection_;
  delete EntityList::default_instance_;
  delete EntityList_reflection_;
}

void protobuf_AddDesc_entity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::personalRobotics::protobuf_AddDesc_pose2D_2eproto();
  ::personalRobotics::protobuf_AddDesc_point2D_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014entity.proto\022\tprocamPRL\032\014pose2D.proto\032"
    "\rpoint2D.proto\"\367\003\n\006Entity\022\026\n\016timestamp_s"
    "ecs\030\001 \001(\003\022\027\n\017timestamp_nsecs\030\002 \001(\005\022\017\n\007fr"
    "ameId\030\003 \001(\005\0220\n\007command\030\004 \001(\0162\031.procamPRL"
    ".Entity.Command:\004NONE\022&\n\004pose\030\005 \001(\0132\030.pe"
    "rsonalRobotics.Pose2D\022/\n\014boundingSize\030\006 "
    "\001(\0132\031.personalRobotics.Point2D\022,\n\tpixelS"
    "ize\030\007 \001(\0132\031.personalRobotics.Point2D\022+\n\010"
    "contours\030\010 \003(\0132\031.personalRobotics.Point2"
    "D\022&\n\005image\030\t \001(\0132\027.procamPRL.Entity.Imag"
    "e\0324\n\005Image\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001("
    "\005\022\014\n\004data\030\003 \001(\014\"g\n\007Command\022\010\n\004NONE\020\001\022\031\n\025"
    "SEND_DISP_INFO_PACKET\020\002\022\025\n\021START_CALIBRA"
    "TION\020\003\022\024\n\020STOP_CALIBRATION\020\004\022\n\n\006STREAM\020\005"
    "\"3\n\nEntityList\022%\n\nentityList\030\001 \003(\0132\021.pro"
    "camPRL.Entity", 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "entity.proto", &protobuf_RegisterTypes);
  Entity::default_instance_ = new Entity();
  Entity_Image::default_instance_ = new Entity_Image();
  EntityList::default_instance_ = new EntityList();
  Entity::default_instance_->InitAsDefaultInstance();
  Entity_Image::default_instance_->InitAsDefaultInstance();
  EntityList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_entity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_entity_2eproto {
  StaticDescriptorInitializer_entity_2eproto() {
    protobuf_AddDesc_entity_2eproto();
  }
} static_descriptor_initializer_entity_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Entity_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_Command_descriptor_;
}
bool Entity_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Entity_Command Entity::NONE;
const Entity_Command Entity::SEND_DISP_INFO_PACKET;
const Entity_Command Entity::START_CALIBRATION;
const Entity_Command Entity::STOP_CALIBRATION;
const Entity_Command Entity::STREAM;
const Entity_Command Entity::Command_MIN;
const Entity_Command Entity::Command_MAX;
const int Entity::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Entity_Image::kWidthFieldNumber;
const int Entity_Image::kHeightFieldNumber;
const int Entity_Image::kDataFieldNumber;
#endif  // !_MSC_VER

Entity_Image::Entity_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:procamPRL.Entity.Image)
}

void Entity_Image::InitAsDefaultInstance() {
}

Entity_Image::Entity_Image(const Entity_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:procamPRL.Entity.Image)
}

void Entity_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity_Image::~Entity_Image() {
  // @@protoc_insertion_point(destructor:procamPRL.Entity.Image)
  SharedDtor();
}

void Entity_Image::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Entity_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_Image_descriptor_;
}

const Entity_Image& Entity_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();
  return *default_instance_;
}

Entity_Image* Entity_Image::default_instance_ = NULL;

Entity_Image* Entity_Image::New() const {
  return new Entity_Image;
}

void Entity_Image::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Entity_Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(width_, height_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entity_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:procamPRL.Entity.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:procamPRL.Entity.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:procamPRL.Entity.Image)
  return false;
#undef DO_
}

void Entity_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:procamPRL.Entity.Image)
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:procamPRL.Entity.Image)
}

::google::protobuf::uint8* Entity_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:procamPRL.Entity.Image)
  // optional int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procamPRL.Entity.Image)
  return target;
}

int Entity_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entity_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entity_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity_Image::MergeFrom(const Entity_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entity_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity_Image::CopyFrom(const Entity_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_Image::IsInitialized() const {

  return true;
}

void Entity_Image::Swap(Entity_Image* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entity_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_Image_descriptor_;
  metadata.reflection = Entity_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Entity::kTimestampSecsFieldNumber;
const int Entity::kTimestampNsecsFieldNumber;
const int Entity::kFrameIdFieldNumber;
const int Entity::kCommandFieldNumber;
const int Entity::kPoseFieldNumber;
const int Entity::kBoundingSizeFieldNumber;
const int Entity::kPixelSizeFieldNumber;
const int Entity::kContoursFieldNumber;
const int Entity::kImageFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:procamPRL.Entity)
}

void Entity::InitAsDefaultInstance() {
  pose_ = const_cast< ::personalRobotics::Pose2D*>(&::personalRobotics::Pose2D::default_instance());
  boundingsize_ = const_cast< ::personalRobotics::Point2D*>(&::personalRobotics::Point2D::default_instance());
  pixelsize_ = const_cast< ::personalRobotics::Point2D*>(&::personalRobotics::Point2D::default_instance());
  image_ = const_cast< ::procamPRL::Entity_Image*>(&::procamPRL::Entity_Image::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:procamPRL.Entity)
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  timestamp_secs_ = GOOGLE_LONGLONG(0);
  timestamp_nsecs_ = 0;
  frameid_ = 0;
  command_ = 1;
  pose_ = NULL;
  boundingsize_ = NULL;
  pixelsize_ = NULL;
  image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:procamPRL.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete boundingsize_;
    delete pixelsize_;
    delete image_;
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New() const {
  return new Entity;
}

void Entity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Entity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(timestamp_secs_, frameid_);
    command_ = 1;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::personalRobotics::Pose2D::Clear();
    }
    if (has_boundingsize()) {
      if (boundingsize_ != NULL) boundingsize_->::personalRobotics::Point2D::Clear();
    }
    if (has_pixelsize()) {
      if (pixelsize_ != NULL) pixelsize_->::personalRobotics::Point2D::Clear();
    }
  }
  if (has_image()) {
    if (image_ != NULL) image_->::procamPRL::Entity_Image::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  contours_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:procamPRL.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_secs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_secs_)));
          set_has_timestamp_secs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp_nsecs;
        break;
      }

      // optional int32 timestamp_nsecs = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp_nsecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_nsecs_)));
          set_has_timestamp_nsecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frameId;
        break;
      }

      // optional int32 frameId = 3;
      case 3: {
        if (tag == 24) {
         parse_frameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_command;
        break;
      }

      // optional .procamPRL.Entity.Command command = 4 [default = NONE];
      case 4: {
        if (tag == 32) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::procamPRL::Entity_Command_IsValid(value)) {
            set_command(static_cast< ::procamPRL::Entity_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .personalRobotics.Pose2D pose = 5;
      case 5: {
        if (tag == 42) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_boundingSize;
        break;
      }

      // optional .personalRobotics.Point2D boundingSize = 6;
      case 6: {
        if (tag == 50) {
         parse_boundingSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundingsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pixelSize;
        break;
      }

      // optional .personalRobotics.Point2D pixelSize = 7;
      case 7: {
        if (tag == 58) {
         parse_pixelSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixelsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_contours;
        break;
      }

      // repeated .personalRobotics.Point2D contours = 8;
      case 8: {
        if (tag == 66) {
         parse_contours:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contours()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_contours;
        if (input->ExpectTag(74)) goto parse_image;
        break;
      }

      // optional .procamPRL.Entity.Image image = 9;
      case 9: {
        if (tag == 74) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:procamPRL.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:procamPRL.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:procamPRL.Entity)
  // optional int64 timestamp_secs = 1;
  if (has_timestamp_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_secs(), output);
  }

  // optional int32 timestamp_nsecs = 2;
  if (has_timestamp_nsecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp_nsecs(), output);
  }

  // optional int32 frameId = 3;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameid(), output);
  }

  // optional .procamPRL.Entity.Command command = 4 [default = NONE];
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->command(), output);
  }

  // optional .personalRobotics.Pose2D pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }

  // optional .personalRobotics.Point2D boundingSize = 6;
  if (has_boundingsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->boundingsize(), output);
  }

  // optional .personalRobotics.Point2D pixelSize = 7;
  if (has_pixelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pixelsize(), output);
  }

  // repeated .personalRobotics.Point2D contours = 8;
  for (int i = 0; i < this->contours_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->contours(i), output);
  }

  // optional .procamPRL.Entity.Image image = 9;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:procamPRL.Entity)
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:procamPRL.Entity)
  // optional int64 timestamp_secs = 1;
  if (has_timestamp_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_secs(), target);
  }

  // optional int32 timestamp_nsecs = 2;
  if (has_timestamp_nsecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp_nsecs(), target);
  }

  // optional int32 frameId = 3;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frameid(), target);
  }

  // optional .procamPRL.Entity.Command command = 4 [default = NONE];
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->command(), target);
  }

  // optional .personalRobotics.Pose2D pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }

  // optional .personalRobotics.Point2D boundingSize = 6;
  if (has_boundingsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->boundingsize(), target);
  }

  // optional .personalRobotics.Point2D pixelSize = 7;
  if (has_pixelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pixelsize(), target);
  }

  // repeated .personalRobotics.Point2D contours = 8;
  for (int i = 0; i < this->contours_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->contours(i), target);
  }

  // optional .procamPRL.Entity.Image image = 9;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procamPRL.Entity)
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_secs = 1;
    if (has_timestamp_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_secs());
    }

    // optional int32 timestamp_nsecs = 2;
    if (has_timestamp_nsecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp_nsecs());
    }

    // optional int32 frameId = 3;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional .procamPRL.Entity.Command command = 4 [default = NONE];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional .personalRobotics.Pose2D pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .personalRobotics.Point2D boundingSize = 6;
    if (has_boundingsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundingsize());
    }

    // optional .personalRobotics.Point2D pixelSize = 7;
    if (has_pixelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pixelsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .procamPRL.Entity.Image image = 9;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

  }
  // repeated .personalRobotics.Point2D contours = 8;
  total_size += 1 * this->contours_size();
  for (int i = 0; i < this->contours_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contours(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  contours_.MergeFrom(from.contours_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_secs()) {
      set_timestamp_secs(from.timestamp_secs());
    }
    if (from.has_timestamp_nsecs()) {
      set_timestamp_nsecs(from.timestamp_nsecs());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_pose()) {
      mutable_pose()->::personalRobotics::Pose2D::MergeFrom(from.pose());
    }
    if (from.has_boundingsize()) {
      mutable_boundingsize()->::personalRobotics::Point2D::MergeFrom(from.boundingsize());
    }
    if (from.has_pixelsize()) {
      mutable_pixelsize()->::personalRobotics::Point2D::MergeFrom(from.pixelsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_image()) {
      mutable_image()->::procamPRL::Entity_Image::MergeFrom(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_boundingsize()) {
    if (!this->boundingsize().IsInitialized()) return false;
  }
  if (has_pixelsize()) {
    if (!this->pixelsize().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->contours())) return false;
  return true;
}

void Entity::Swap(Entity* other) {
  if (other != this) {
    std::swap(timestamp_secs_, other->timestamp_secs_);
    std::swap(timestamp_nsecs_, other->timestamp_nsecs_);
    std::swap(frameid_, other->frameid_);
    std::swap(command_, other->command_);
    std::swap(pose_, other->pose_);
    std::swap(boundingsize_, other->boundingsize_);
    std::swap(pixelsize_, other->pixelsize_);
    contours_.Swap(&other->contours_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityList::kEntityListFieldNumber;
#endif  // !_MSC_VER

EntityList::EntityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:procamPRL.EntityList)
}

void EntityList::InitAsDefaultInstance() {
}

EntityList::EntityList(const EntityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:procamPRL.EntityList)
}

void EntityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityList::~EntityList() {
  // @@protoc_insertion_point(destructor:procamPRL.EntityList)
  SharedDtor();
}

void EntityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityList_descriptor_;
}

const EntityList& EntityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_entity_2eproto();
  return *default_instance_;
}

EntityList* EntityList::default_instance_ = NULL;

EntityList* EntityList::New() const {
  return new EntityList;
}

void EntityList::Clear() {
  entitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:procamPRL.EntityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .procamPRL.Entity entityList = 1;
      case 1: {
        if (tag == 10) {
         parse_entityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entityList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:procamPRL.EntityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:procamPRL.EntityList)
  return false;
#undef DO_
}

void EntityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:procamPRL.EntityList)
  // repeated .procamPRL.Entity entityList = 1;
  for (int i = 0; i < this->entitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entitylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:procamPRL.EntityList)
}

::google::protobuf::uint8* EntityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:procamPRL.EntityList)
  // repeated .procamPRL.Entity entityList = 1;
  for (int i = 0; i < this->entitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entitylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:procamPRL.EntityList)
  return target;
}

int EntityList::ByteSize() const {
  int total_size = 0;

  // repeated .procamPRL.Entity entityList = 1;
  total_size += 1 * this->entitylist_size();
  for (int i = 0; i < this->entitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityList::MergeFrom(const EntityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  entitylist_.MergeFrom(from.entitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityList::CopyFrom(const EntityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entitylist())) return false;
  return true;
}

void EntityList::Swap(EntityList* other) {
  if (other != this) {
    entitylist_.Swap(&other->entitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityList_descriptor_;
  metadata.reflection = EntityList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace procamPRL

// @@protoc_insertion_point(global_scope)
